# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:46:33+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    ContentproSearchGetResponse,
    ContentproSimilarTextPostRequest,
    ContentproSimilarTextPostResponse,
    Link,
    Page,
    Page2,
    SearchGetResponse,
    SimilarGetResponse,
    Terms,
)

app = MCPProxy(
    contact={'email': 'support@byautomata.io'},
    description="This document provides the documentation for the Market Intelligence API by Automata. Get your API Key at https://apis.byautomata.io and check out our <a href='https://www.getpostman.com/collections/d182a1c78d4491d55e19'>Postman Collection</a>.<br><br>The root API endpoint is https://api.byautomata.io. Please refer to the code samples for examples of how to call the Market Intelligence API. The ContentPro endpoints (/contentpro-search and /contentpro-similar-text) are not included in the standard Market Intelligence API plans. Please contact support@byautomata.io for access.",
    license={
        'name': 'Apache 2.0',
        'url': 'http://www.apache.org/licenses/LICENSE-2.0.html',
    },
    termsOfService='https://byautomata.io/terms/',
    title='Automata Market Intelligence API',
    version='1.0.1',
    servers=[{'url': 'https://api.byautomata.io'}],
)


@app.get('/contentpro-search', tags=['content_search', 'similar_content_retrieval'])
def get_contentpro_search(terms: Terms):
    """
    Send search terms to receive the most relevant articles and companies.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/contentpro-similar-text', tags=['content_search', 'similar_content_retrieval']
)
def post_contentpro_similar_text(body: ContentproSimilarTextPostRequest):
    """
    The /contentpro-similar-text endpoint accepts and arbitrary piece of text and returns similar articles and blogs written by companies.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/search', tags=['content_search', 'similar_content_retrieval'])
def get_search(terms: Terms, page: Optional[Page] = '0'):
    """
    Send search terms to receive the most relevant companies along with text snippets.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/similar', tags=['content_search', 'similar_content_retrieval'])
def get_similar(link: Link, page: Optional[Page2] = '0'):
    """
    Send a company website to receive a list of companies related to them.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
